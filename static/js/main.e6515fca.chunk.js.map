{"version":3,"sources":["supabaseClient.js","Auth.js","Avatar.js","Account.js","App.js","reportWebVitals.js","index.js"],"names":["supabase","createClient","process","Auth","useState","loading","setLoading","email","setEmail","handleLogin","a","auth","signIn","error","alert","error_description","message","className","type","placeholder","value","onChange","e","target","onClick","preventDefault","disabled","Avatar","url","size","onUpload","avatarUrl","setAvatarUrl","uploading","setUploading","path","storage","from","download","data","URL","createObjectURL","console","log","event","files","length","Error","file","fileExt","name","split","pop","fileName","Math","random","filePath","upload","uploadError","useEffect","downloadImage","src","alt","style","height","width","htmlFor","visibility","position","id","accept","Account","session","username","setUsername","website","setWebsite","avatar_url","user","select","eq","single","status","updateProfile","updates","updated_at","Date","upsert","returning","getProfile","signOut","Home","setSession","onAuthStateChange","_event","padding","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e6515fca.chunk.js","sourcesContent":["import { createClient } from '@supabase/supabase-js'\r\n\r\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL\r\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)","import { useState } from 'react';\r\nimport { supabase } from './supabaseClient';\r\n\r\nexport default function Auth() {\r\n  const [loading, setLoading] = useState(false);\r\n  const [email, setEmail] = useState('');\r\n\r\n  const handleLogin = async (email) => {\r\n    try {\r\n      setLoading(true);\r\n      const { error } = await supabase.auth.signIn({ email });\r\n      if (error) throw error\r\n      alert('Check your email for the login link!');\r\n    } catch (error) {\r\n      alert(error.error_description || error.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"row flex flex-center\">\r\n      <div className=\"col-6 form-widget\">\r\n        <h1>test</h1>\r\n        <p className=\"description\">Sign in via magic link with your email below</p>\r\n        <div>\r\n          <input\r\n            className=\"inputField\"\r\n            type=\"email\"\r\n            placeholder=\"Your email\"\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <button\r\n            onClick={(e) => {\r\n              e.preventDefault()\r\n              handleLogin(email)\r\n            }}\r\n            className={'button block'}\r\n            disabled={loading}\r\n          >\r\n            {loading ? <span>Loading</span> : <span>Send magic link</span>}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import { useEffect, useState } from 'react';\r\nimport { supabase } from './supabaseClient';\r\n\r\nexport default function Avatar({ url, size, onUpload }) {\r\n  const [avatarUrl, setAvatarUrl] = useState(null),\r\n    [uploading, setUploading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (url) downloadImage(url);\r\n  }, [url])\r\n\r\n  async function downloadImage(path) {\r\n    try {\r\n      const { data, error } = await supabase.storage.from('avatars').download(path);\r\n      \r\n      if (error) {\r\n        throw error;\r\n      }\r\n      const url = URL.createObjectURL(data);\r\n      setAvatarUrl(url);\r\n    } catch (error) {\r\n      console.log('Error downloading image: ', error.message);\r\n    }\r\n  }\r\n\r\n\r\n  async function uploadAvatar(event) {\r\n    try {\r\n      setUploading(true);\r\n\r\n      if (!event.target.files || event.target.files.length === 0) {\r\n        throw new Error('You must select an image to upload.');\r\n      }\r\n\r\n      const file = event.target.files[0],\r\n        fileExt = file.name.split('.').pop(),\r\n        fileName = `${Math.random()}.${fileExt}`,\r\n        filePath = `${fileName}`;\r\n\r\n      let { error: uploadError } = await supabase.storage\r\n        .from('avatars')\r\n        .upload(filePath, file);\r\n\r\n      if (uploadError) {\r\n        throw uploadError;\r\n      }\r\n\r\n      onUpload(filePath);\r\n    } catch (error) {\r\n      alert(error.message);\r\n    } finally {\r\n      setUploading(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {avatarUrl ? (\r\n        <img\r\n          src={avatarUrl}\r\n          alt=\"Avatar\"\r\n          className=\"avatar image\"\r\n          style={{ height: size, width: size }}\r\n        />\r\n      ) : (\r\n        <div className=\"avatar no-image\" style={{ height: size, width: size }} />\r\n      )}\r\n      <div style={{ width: size }}>\r\n        <label className=\"button primary block\" htmlFor=\"single\">\r\n          {uploading ? 'Uploading ...' : 'Upload'}\r\n        </label>\r\n        <input\r\n          style={{\r\n            visibility: 'hidden',\r\n            position: 'absolute',\r\n          }}\r\n          type=\"file\"\r\n          id=\"single\"\r\n          accept=\"image/*\"\r\n          onChange={uploadAvatar}\r\n          disabled={uploading}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}","import { useState, useEffect } from 'react';\r\nimport { supabase } from './supabaseClient';\r\nimport Avatar from './Avatar';\r\n\r\nexport default function Account({ session }) {\r\n  const [loading, setLoading] = useState(true),\r\n   [username, setUsername] = useState(null),\r\n   [website, setWebsite] = useState(null),\r\n   [avatar_url, setAvatarUrl] = useState(null);\r\n\r\n  useEffect(() => {\r\n    getProfile()\r\n  }, [session])\r\n\r\n  async function getProfile() {\r\n    try {\r\n      setLoading(true)\r\n      const user = supabase.auth.user()\r\n\r\n      let { data, error, status } = await supabase\r\n        .from('profiles')\r\n        .select(`username, website, avatar_url`)\r\n        .eq('id', user.id)\r\n        .single();\r\n\r\n      if (error && status !== 406) {\r\n        throw error;\r\n      }\r\n\r\n      if (data) {\r\n        setUsername(data.username);\r\n        setWebsite(data.website);\r\n        setAvatarUrl(data.avatar_url);\r\n      }\r\n    } catch (error) {\r\n      alert(error.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }\r\n\r\n  async function updateProfile({ username, website, avatar_url }) {\r\n    try {\r\n      setLoading(true);\r\n      const user = supabase.auth.user();\r\n\r\n      const updates = {\r\n        id: user.id,\r\n        username,\r\n        website,\r\n        avatar_url,\r\n        updated_at: new Date(),\r\n      };\r\n\r\n      let { error } = await supabase.from('profiles').upsert(updates, {\r\n        returning: 'minimal', // Don't return the value after inserting\r\n      });\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n    } catch (error) {\r\n      alert(error.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"form-widget\">\r\n        <Avatar\r\n      url={avatar_url}\r\n      size={150}\r\n      onUpload={(url) => {\r\n        setAvatarUrl(url)\r\n        updateProfile({ username, website, avatar_url: url })\r\n      }}\r\n    />\r\n      <div>\r\n        <label htmlFor=\"email\">Email</label>\r\n        <input id=\"email\" type=\"text\" value={session.user.email} disabled />\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"username\">Name</label>\r\n        <input\r\n          id=\"username\"\r\n          type=\"text\"\r\n          value={username || ''}\r\n          onChange={(e) => setUsername(e.target.value)}\r\n        />\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"website\">Website</label>\r\n        <input\r\n          id=\"website\"\r\n          type=\"website\"\r\n          value={website || ''}\r\n          onChange={(e) => setWebsite(e.target.value)}\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        <button\r\n          className=\"button block primary\"\r\n          onClick={() => updateProfile({ username, website, avatar_url })}\r\n          disabled={loading}\r\n        >\r\n          {loading ? 'Loading ...' : 'Update'}\r\n        </button>\r\n      </div>\r\n\r\n      <div>\r\n        <button className=\"button block\" onClick={() => supabase.auth.signOut()}>\r\n          Sign Out\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import './index.css'\nimport { useState, useEffect } from 'react'\nimport { supabase } from './supabaseClient'\nimport Auth from './Auth'\nimport Account from './Account'\n\nexport default function Home() {\n  const [session, setSession] = useState(null)\n\n  useEffect(() => {\n    setSession(supabase.auth.session())\n\n    supabase.auth.onAuthStateChange((_event, session) => {\n      setSession(session)\n    })\n  }, [])\n\n  return (\n    <div className=\"container\" style={{ padding: '50px 0 100px 0' }}>\n      {!session ? <Auth /> : <Account key={session.user.id} session={session} />}\n    </div>\n  )\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}